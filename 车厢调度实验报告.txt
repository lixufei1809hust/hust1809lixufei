实习报告（车厢调度）
电信1809 李旭飞 U201813483 完成日期2019/04/13
1.需求分析
任务：求车厢输出所有可能
输入：车厢数量n
输出：车厢输出的所有顺序
功能：利用栈求解车厢调度所有可能


2.概要设计
对于下一个要进栈的元素，有两种可能，一种是栈顶元素出栈，一种是下一个元素进栈
由此递归，每种递归后还要回溯到初始状态
输出一种可能的情况


3.详细设计
#include <stdio.h>
#include <stdlib.h>
#define n 4//车厢个数
int sum=0;//用来计算情况的次数
typedef struct
{
    int *base;
    int *top;
}Stack;//定义栈的结构体
void InitStack(Stack &s)
{
    s.base=(int*)malloc(n*sizeof(int));
    s.top=s.base;
}//构建栈
void push(Stack &s,int e)
{
    *s.top++=e;
}// 下一个元素进栈
void pop(Stack &s,int &e)
{
    e=*--s.top;
}//栈顶元素出栈
int Empty(Stack s)
{
   if(s.base==s.top)
        return 1;
   else
   {
       return 0;
   }
}//检测栈是否为空
void Do(Stack s,int next,int *a,int k)//递归函数
{
    int e;
    if(Empty(s)&&next==n+1)//检查是否所有元素都入栈且出栈
    {
        sum++;//情况数+1
        int i;
        for (i=1;i<=n;i++) printf("%2d",a[i]);printf("\n");
    }  // 输出一种可能
    if(!Empty(s)) //第一种情况，如果栈不为空，就将栈顶元素出栈，并将这个数计入数组a中
    {
        pop(s,e);
        a[k+1]=e;
        Do(s,next,a,k+1);
        push(s,e);
    }
    if(next<=n)//第二种情况，下一个元素进栈
    {
        push(s,next);
        Do(s,next+1,a,k);
        pop(s,e);
    }
}
int main()
{
    int a[n+1];
    Stack s;
    InitStack(s);
    Do(s,1,a,0);
    printf("sum=%d\n",sum);
    return 0;
}



4.调试分析
Do函数递归的时候要主要输入的实参是什么，应该是已经改变过的参数
如 next+1， k+1 等
经验与体会：递归真的好难，即使告诉你程序这么写，也不明白为什么几行就可以把所有的可能都输出
过于抽象，无法想象出具体的每一步可能是递归程序不容易写出来的原因



5.用户使用说明：无


6.exp:运行 n=4时
输出： 
 1 2 3 4
 1 2 4 3
 1 3 2 4
 1 3 4 2
 1 4 3 2
 2 1 3 4
 2 1 4 3
 2 3 1 4
 2 3 4 1
 2 4 3 1
 3 2 1 4
 3 2 4 1
 3 4 2 1
 4 3 2 1
sum=14