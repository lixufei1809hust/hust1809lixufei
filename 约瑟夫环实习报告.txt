实习报告（约瑟夫环）
电信1809李旭飞U201813483 完成日期2019/03/25
1.需求分析
任务：求约瑟夫环问题的输出顺序
输入：人数n（整数），开始密码m（整数）和每个人各自的密码（与人数n相同）
输出：依此出局的人的顺序（整数序列）
功能：解决约瑟夫环问题
2.概要设计
结构体LinkList
函数LinkList *create() //创建单循环链表，返回链表头指针
函数void function()//将依此出局的人的顺序放入一个数组中
主函数void main()
{
   create();
   function();
   print;
}
3.详细设计
创建结构体LinkList,包括内容
{
      int data  存放每个人的密码
      int num 每个人的序号
      struct node* next 指向下一个节点
}



用LinkList *create(int n)函数创建单循环链表
{
LinkList *head,*p,*q
创建n次循环，每循环一次确定一个人的各种信息，i从1开始
malloc 一个LinkList 的空间
如果i==1，那么head=p，q=p 记住第一个节点的位置，q一直是p的前一个，该过程只在第一次循环进行一次
p->next=head，q->next=p,q=p创建链关系
最后return head
}


function(LinkList *p,int *a,int n,int m)函数将顺序依此存入数组a中
{
创建n-1次循环

{
m与（m%人数）等效 ，为减少运行次数所以取最小的m 但不为0
m如果为1 则将自身出局，找到p所在的前一个节点q 将p中的值赋给a，m后  删除p
else
将p向后移动m-1次  所在位置即为需要删除的节点
重复上述操作
}
最后一次剩下最后一个人 将p中的num赋给a[n-1]

}



void main（）
{
创建head，a，n，m;
head=create(n);
function(head,a,n,m);
print;
}

4.调试分析
function函数中需要考虑m%人数的值是否为1，这将影响到是否需要移动p
而每一次循环都会赋给a[]一个值，所以循环不能空循环，m!=0
时间复杂度为o(mn)
经验与体会：感觉程序设计不够漂亮，思路不是特别清晰，离优秀的程序设计还有很大差距
对其中的p,q命名过于简单，用 now pre 可能会让人更加容易看懂


5.用户使用说明：根据提示 依此输入 n,m
然后输入密码，密码根据输入的n来确定个数，n,m,密码均为整数
运行即可看到顺序

6.exp:输入：n=7,m=20,密码: 3 1 7 2 4 8 4 
输出： 6 1 4 7 2 3 5
